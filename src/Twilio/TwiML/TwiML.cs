/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Xml.Linq;
using Twilio.Exceptions;

namespace Twilio.TwiML 
{

    /// <summary>
    /// Base class for all TwiML Objects.
    /// </summary>
    public abstract class TwiML 
    {
        /// <summary>
        /// Tag name
        /// </summary>
        private string TagName { get; }
        /// <summary>
        /// Children elements
        /// </summary>
        private List<TwiML> Children { get; }
        /// <summary>
        /// Additional tag attributes to set on the generated xml
        /// </summary>
        private Dictionary<string,string> Options { get; }

        /// <summary>
        /// Base constructor to create any TwiML instance.
        /// </summary>
        /// <param name="tagName"> TwiML tag name </param>
        protected TwiML(string tagName)
        {
            this.TagName = tagName;
            this.Children = new List<TwiML>();
            this.Options = new Dictionary<string,string>();
            // TODO: For .NET4+ Inherit DynamicObject and add magic getter/setters?
        }

        /// <summary>
        /// Get the TwiML element body.
        /// </summary>
        protected abstract string GetElementBody();

        /// <summary>
        /// Get the TwiML element attributes.
        /// </summary>
        protected abstract List<XAttribute> GetElementAttributes();

        /// <summary>
        /// Append a child TwiML element to this element returning this element to allow chaining.
        /// </summary>
        /// <param name="childElem"> Child TwiML element to add </param>
        public TwiML Append(TwiML childElem)
        {
            this.Children.Add(childElem);
            return this;
        }

        /// <summary>
        /// Append a child TwiML element to this element returning the newly created element.
        /// </summary>
        /// <param name="childElem"> Child TwiML element to add </param>
        public TwiML Nest(TwiML childElem)
        {
            /* TODO: Use Generics to make this return type be the actual TwiML subclass? allows
               TODO: IDE integration? */
            this.Children.Add(childElem);
            return childElem;
        }

        /// <summary>
        /// Add freeform key-value attributes to the generated xml
        /// </summary>
        /// <param name="key"> Option key </param>
        /// <param name="value"> Option value </param>
        public TwiML SetOption(string key, object value)
        {
            this.Options.Add(key, value.ToString());
            return this;
        }

        /// <summary>
        /// Get freeform key-value attributes attached to this class
        /// </summary>
        /// <param name="key"> Option key </param>
        public string GetOption(string key)
        {
            return this.Options[key];
        }

        /// <summary>
        /// Generate XElement from TwiML object
        /// </summary>
        protected XElement ToXml()
        {
            if (this.GetElementBody() != null && this.Children.Count != 0)
            {
                // TODO: Make this a TwiML Exception?
                throw new TwilioException("TwiML Element cannot have both body and children elements");
            }

            var body = this.GetElementBody();
            var elem = string.IsNullOrEmpty(body) ? new XElement(this.TagName)
                                                  : new XElement(this.TagName, body);

            this.GetElementAttributes().ForEach(attr => elem.Add(attr));
            this.Options.ToList().ForEach(e => elem.Add(new XAttribute(e.Key, e.Value)));
            this.Children.ForEach(child => elem.Add(child.ToXml()));

            return elem;
        }

        /// <summary>
        /// Generate XML from TwiML object
        /// </summary>
        public override string ToString()
        {
            var declaration = new XDeclaration("1.0", "utf-8", null);
            var elem = this.ToXml();

            var document = new XDocument(declaration, elem);
            var writer = new Utf8StringWriter();
            document.Save(writer);
            return writer.GetStringBuilder().ToString();
        }
    }

    /// <summary>
    /// StringWriter which overrides default encoding to use UTF8.
    /// </summary>
    public class Utf8StringWriter : StringWriter 
    {
        public override Encoding Encoding => Encoding.UTF8;
    }

}
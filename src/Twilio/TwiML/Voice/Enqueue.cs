/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Xml.Linq;
using Twilio.TwiML.Voice;

namespace Twilio.TwiML.Voice 
{

    /// <summary>
    /// Enqueue TwiML Noun
    /// </summary>
    public class Enqueue : TwiML 
    {
        /// <summary>
        /// Friendly name
        /// </summary>
        public string Name { get; set; }
        /// <summary>
        /// Action URL
        /// </summary>
        public Uri Action { get; set; }
        /// <summary>
        /// Action URL method
        /// </summary>
        public Twilio.Http.HttpMethod Method { get; set; }
        /// <summary>
        /// Wait URL
        /// </summary>
        public Uri WaitUrl { get; set; }
        /// <summary>
        /// Wait URL method
        /// </summary>
        public Twilio.Http.HttpMethod WaitUrlMethod { get; set; }
        /// <summary>
        /// TaskRouter Workflow SID
        /// </summary>
        public string WorkflowSid { get; set; }

        /// <summary>
        /// Create a new Enqueue
        /// </summary>
        /// <param name="name"> Friendly name, the body of the TwiML Element. </param>
        /// <param name="action"> Action URL </param>
        /// <param name="method"> Action URL method </param>
        /// <param name="waitUrl"> Wait URL </param>
        /// <param name="waitUrlMethod"> Wait URL method </param>
        /// <param name="workflowSid"> TaskRouter Workflow SID </param>
        public Enqueue(string name = null, 
                       Uri action = null, 
                       Twilio.Http.HttpMethod method = null, 
                       Uri waitUrl = null, 
                       Twilio.Http.HttpMethod waitUrlMethod = null, 
                       string workflowSid = null) : base("Enqueue")
        {
            this.Name = name;
            this.Action = action;
            this.Method = method;
            this.WaitUrl = waitUrl;
            this.WaitUrlMethod = waitUrlMethod;
            this.WorkflowSid = workflowSid;
        }

        /// <summary>
        /// Return the body of the TwiML tag
        /// </summary>
        protected override string GetElementBody()
        {
            return this.Name;
        }

        /// <summary>
        /// Return the attributes of the TwiML tag
        /// </summary>
        protected override List<XAttribute> GetElementAttributes()
        {
            var attributes = new List<XAttribute>();
            if (this.Action != null)
            {
                attributes.Add(new XAttribute("action", this.Action.AbsoluteUri));
            }
            if (this.Method != null)
            {
                attributes.Add(new XAttribute("method", this.Method.ToString()));
            }
            if (this.WaitUrl != null)
            {
                attributes.Add(new XAttribute("waitUrl", this.WaitUrl.AbsoluteUri));
            }
            if (this.WaitUrlMethod != null)
            {
                attributes.Add(new XAttribute("waitUrlMethod", this.WaitUrlMethod.ToString()));
            }
            if (this.WorkflowSid != null)
            {
                attributes.Add(new XAttribute("workflowSid", this.WorkflowSid));
            }
            return attributes;
        }

        /// <summary>
        /// Create a new <Enqueue/> element and append it as a child of this element.
        /// </summary>
        /// <param name="body"> TaskRouter task attributes, the body of the TwiML Element. Also accepts stringified object
        ///            </param>
        public Enqueue Task(string body = null)
        {
            var newChild = new Task(body);
            this.Append(newChild);
            return this;
        }
    }

}
/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Xml.Linq;
using Twilio.TwiML.Voice;

namespace Twilio.TwiML 
{

    /// <summary>
    /// Response TwiML for Voice
    /// </summary>
    public class VoiceResponse : TwiML 
    {
        /// <summary>
        /// Create a new VoiceResponse
        /// </summary>
        public VoiceResponse() : base("Response")
        {
        }

        /// <summary>
        /// Return the body of the TwiML tag
        /// </summary>
        protected override string GetElementBody()
        {
            return null;
        }

        /// <summary>
        /// Return the attributes of the TwiML tag
        /// </summary>
        protected override List<XAttribute> GetElementAttributes()
        {
            var attributes = new List<XAttribute>();
            return attributes;
        }

        /// <summary>
        /// Create a new <Response/> element and append it as a child of this element.
        /// </summary>
        /// <param name="number"> Phone number to dial, the body of the TwiML Element. </param>
        /// <param name="action"> Action URL </param>
        /// <param name="method"> Action URL method </param>
        /// <param name="timeout"> Time to wait for answer </param>
        /// <param name="hangupOnStar"> Hangup call on star press </param>
        /// <param name="timeLimit"> Max time length </param>
        /// <param name="callerId"> Caller ID to display </param>
        /// <param name="record"> Record the call </param>
        /// <param name="trim"> Trim the recording </param>
        /// <param name="recordingStatusCallback"> Recording status callback URL </param>
        /// <param name="recordingStatusCallbackMethod"> Recording status callback URL method </param>
        public VoiceResponse Dial(string number = null, 
                                  Uri action = null, 
                                  Twilio.Http.HttpMethod method = null, 
                                  int? timeout = null, 
                                  bool? hangupOnStar = null, 
                                  int? timeLimit = null, 
                                  string callerId = null, 
                                  Dial.TrimEnum record = null, 
                                  Dial.TrimEnum trim = null, 
                                  Uri recordingStatusCallback = null, 
                                  Twilio.Http.HttpMethod recordingStatusCallbackMethod = null)
        {
            var newChild = new Dial(
                number,
                action,
                method,
                timeout,
                hangupOnStar,
                timeLimit,
                callerId,
                record,
                trim,
                recordingStatusCallback,
                recordingStatusCallbackMethod
            );
            this.Append(newChild);
            return this;
        }

        /// <summary>
        /// Create a new <Response/> element and append it as a child of this element.
        /// </summary>
        public VoiceResponse Echo()
        {
            var newChild = new Echo();
            this.Append(newChild);
            return this;
        }

        /// <summary>
        /// Create a new <Response/> element and append it as a child of this element.
        /// </summary>
        /// <param name="name"> Friendly name, the body of the TwiML Element. </param>
        /// <param name="action"> Action URL </param>
        /// <param name="method"> Action URL method </param>
        /// <param name="waitUrl"> Wait URL </param>
        /// <param name="waitUrlMethod"> Wait URL method </param>
        /// <param name="workflowSid"> TaskRouter Workflow SID </param>
        public VoiceResponse Enqueue(string name = null, 
                                     Uri action = null, 
                                     Twilio.Http.HttpMethod method = null, 
                                     Uri waitUrl = null, 
                                     Twilio.Http.HttpMethod waitUrlMethod = null, 
                                     string workflowSid = null)
        {
            var newChild = new Enqueue(name, action, method, waitUrl, waitUrlMethod, workflowSid);
            this.Append(newChild);
            return this;
        }

        /// <summary>
        /// Create a new <Response/> element and append it as a child of this element.
        /// </summary>
        /// <param name="input"> Input type Twilio should accept </param>
        /// <param name="action"> Action URL </param>
        /// <param name="method"> Action URL method </param>
        /// <param name="timeout"> Time to wait to gather input </param>
        /// <param name="speechTimeout"> Time to wait to gather speech input and it should be either auto or a positive
        ///                     integer. </param>
        /// <param name="maxSpeechTime"> Max allowed time for speech input </param>
        /// <param name="profanityFilter"> Profanity Filter on speech </param>
        /// <param name="finishOnKey"> Finish gather on key </param>
        /// <param name="numDigits"> Number of digits to collect </param>
        /// <param name="partialResultCallback"> Partial result callback URL </param>
        /// <param name="partialResultCallbackMethod"> Partial result callback URL method </param>
        /// <param name="language"> Language to use </param>
        /// <param name="hints"> Speech recognition hints </param>
        /// <param name="bargeIn"> Stop playing media upon speech </param>
        public VoiceResponse Gather(Gather.InputEnum input = null, 
                                    Uri action = null, 
                                    Twilio.Http.HttpMethod method = null, 
                                    int? timeout = null, 
                                    string speechTimeout = null, 
                                    int? maxSpeechTime = null, 
                                    bool? profanityFilter = null, 
                                    string finishOnKey = null, 
                                    int? numDigits = null, 
                                    Uri partialResultCallback = null, 
                                    Twilio.Http.HttpMethod partialResultCallbackMethod = null, 
                                    Gather.LanguageEnum language = null, 
                                    string hints = null, 
                                    bool? bargeIn = null)
        {
            var newChild = new Gather(
                input,
                action,
                method,
                timeout,
                speechTimeout,
                maxSpeechTime,
                profanityFilter,
                finishOnKey,
                numDigits,
                partialResultCallback,
                partialResultCallbackMethod,
                language,
                hints,
                bargeIn
            );
            this.Append(newChild);
            return this;
        }

        /// <summary>
        /// Create a new <Response/> element and append it as a child of this element.
        /// </summary>
        public VoiceResponse Hangup()
        {
            var newChild = new Hangup();
            this.Append(newChild);
            return this;
        }

        /// <summary>
        /// Create a new <Response/> element and append it as a child of this element.
        /// </summary>
        public VoiceResponse Leave()
        {
            var newChild = new Leave();
            this.Append(newChild);
            return this;
        }

        /// <summary>
        /// Create a new <Response/> element and append it as a child of this element.
        /// </summary>
        /// <param name="length"> Length in seconds to pause </param>
        public VoiceResponse Pause(int? length = null)
        {
            var newChild = new Pause(length);
            this.Append(newChild);
            return this;
        }

        /// <summary>
        /// Create a new <Response/> element and append it as a child of this element.
        /// </summary>
        /// <param name="url"> Media URL, the body of the TwiML Element. </param>
        /// <param name="loop"> Times to loop media </param>
        /// <param name="digits"> Play DTMF tones for digits </param>
        public VoiceResponse Play(Uri url = null, int? loop = null, string digits = null)
        {
            var newChild = new Play(url, loop, digits);
            this.Append(newChild);
            return this;
        }

        /// <summary>
        /// Create a new <Response/> element and append it as a child of this element.
        /// </summary>
        /// <param name="name"> Queue name, the body of the TwiML Element. </param>
        /// <param name="url"> Action URL </param>
        /// <param name="method"> Action URL method </param>
        /// <param name="reservationSid"> TaskRouter Reservation SID </param>
        /// <param name="postWorkActivitySid"> TaskRouter Activity SID </param>
        public VoiceResponse Queue(string name = null, Uri url = null, Twilio.Http.HttpMethod method = null, string reservationSid = null, string postWorkActivitySid = null)
        {
            var newChild = new Queue(name, url, method, reservationSid, postWorkActivitySid);
            this.Append(newChild);
            return this;
        }

        /// <summary>
        /// Create a new <Response/> element and append it as a child of this element.
        /// </summary>
        /// <param name="action"> Action URL </param>
        /// <param name="method"> Action URL method </param>
        /// <param name="timeout"> Timeout to begin recording </param>
        /// <param name="finishOnKey"> Finish recording on key </param>
        /// <param name="maxLength"> Max time to record in seconds </param>
        /// <param name="playBeep"> Play beep </param>
        /// <param name="trim"> Trim the recording </param>
        /// <param name="recordingStatusCallback"> Status callback URL </param>
        /// <param name="recordingStatusCallbackMethod"> Status callback URL method </param>
        /// <param name="transcribe"> Transcribe the recording </param>
        /// <param name="transcribeCallback"> Transcribe callback URL </param>
        public VoiceResponse Record(Uri action = null, 
                                    Twilio.Http.HttpMethod method = null, 
                                    int? timeout = null, 
                                    string finishOnKey = null, 
                                    int? maxLength = null, 
                                    bool? playBeep = null, 
                                    Record.TrimEnum trim = null, 
                                    Uri recordingStatusCallback = null, 
                                    Twilio.Http.HttpMethod recordingStatusCallbackMethod = null, 
                                    bool? transcribe = null, 
                                    Uri transcribeCallback = null)
        {
            var newChild = new Record(
                action,
                method,
                timeout,
                finishOnKey,
                maxLength,
                playBeep,
                trim,
                recordingStatusCallback,
                recordingStatusCallbackMethod,
                transcribe,
                transcribeCallback
            );
            this.Append(newChild);
            return this;
        }

        /// <summary>
        /// Create a new <Response/> element and append it as a child of this element.
        /// </summary>
        /// <param name="url"> Redirect URL, the body of the TwiML Element. </param>
        /// <param name="method"> Redirect URL method </param>
        public VoiceResponse Redirect(Uri url = null, Twilio.Http.HttpMethod method = null)
        {
            var newChild = new Redirect(url, method);
            this.Append(newChild);
            return this;
        }

        /// <summary>
        /// Create a new <Response/> element and append it as a child of this element.
        /// </summary>
        /// <param name="reason"> Rejection reason </param>
        public VoiceResponse Reject(Reject.ReasonEnum reason = null)
        {
            var newChild = new Reject(reason);
            this.Append(newChild);
            return this;
        }

        /// <summary>
        /// Create a new <Response/> element and append it as a child of this element.
        /// </summary>
        /// <param name="message"> Message to say, the body of the TwiML Element. </param>
        /// <param name="voice"> Voice to use </param>
        /// <param name="loop"> Times to loop message </param>
        /// <param name="language"> Message langauge </param>
        public VoiceResponse Say(string message = null, Say.VoiceEnum voice = null, int? loop = null, Say.LanguageEnum language = null)
        {
            var newChild = new Say(message, voice, loop, language);
            this.Append(newChild);
            return this;
        }

        /// <summary>
        /// Create a new <Response/> element and append it as a child of this element.
        /// </summary>
        /// <param name="message"> Message body, the body of the TwiML Element. </param>
        /// <param name="to"> Number to send message to </param>
        /// <param name="from"> Number to send message from </param>
        /// <param name="action"> Action URL </param>
        /// <param name="method"> Action URL method </param>
        /// <param name="statusCallback"> Status callback URL </param>
        public VoiceResponse Sms(string message = null, 
                                 Types.PhoneNumber to = null, 
                                 Types.PhoneNumber from = null, 
                                 Uri action = null, 
                                 Twilio.Http.HttpMethod method = null, 
                                 Uri statusCallback = null)
        {
            var newChild = new Sms(message, to, from, action, method, statusCallback);
            this.Append(newChild);
            return this;
        }
    }

}